// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonelTracking_3_DAL;

#nullable disable

namespace PersonelTracking_3_DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231022125607_MigCertifacetAdded")]
    partial class MigCertifacetAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeEducationInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeEducationInfoId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("employeeDetailID")
                        .HasColumnType("int");

                    b.Property<int>("employeeEducationInfoID")
                        .HasColumnType("int");

                    b.Property<int>("employeePersonalDocumnetID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tcNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("birthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeID")
                        .HasColumnType("int");

                    b.Property<string>("fatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("livingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("maritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("motherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("employeeID")
                        .IsUnique();

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeeEducationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("employeeID")
                        .HasColumnType("int");

                    b.Property<string>("highSchoolGradued")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("highSchoolGraduedGPA")
                        .HasColumnType("int");

                    b.Property<string>("universityGradued")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("universityGraduedGPA")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("employeeID")
                        .IsUnique();

                    b.ToTable("EmployeeEducationInfos");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeePersonalDocumnet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyContract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("criminalRecordCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("driversLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeeID")
                        .HasColumnType("int");

                    b.Property<string>("familyIdentityCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("healthReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jobApplication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("militaryServiceCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("employeeID")
                        .IsUnique();

                    b.ToTable("EmployeePersonalDocumnets");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.Certificate", b =>
                {
                    b.HasOne("PersonelTracking_4_Entities.Contrete.EmployeeEducationInfo", "EmployeeEducationInfo")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeEducationInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEducationInfo");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeeDetail", b =>
                {
                    b.HasOne("PersonelTracking_4_Entities.Contrete.Employee", "employee")
                        .WithOne("employeeDetail")
                        .HasForeignKey("PersonelTracking_4_Entities.Contrete.EmployeeDetail", "employeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeeEducationInfo", b =>
                {
                    b.HasOne("PersonelTracking_4_Entities.Contrete.Employee", "employee")
                        .WithOne("employeeEducationInfo")
                        .HasForeignKey("PersonelTracking_4_Entities.Contrete.EmployeeEducationInfo", "employeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeePersonalDocumnet", b =>
                {
                    b.HasOne("PersonelTracking_4_Entities.Contrete.Employee", "employee")
                        .WithOne("employeePersonalDocumnet")
                        .HasForeignKey("PersonelTracking_4_Entities.Contrete.EmployeePersonalDocumnet", "employeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.Employee", b =>
                {
                    b.Navigation("employeeDetail")
                        .IsRequired();

                    b.Navigation("employeeEducationInfo")
                        .IsRequired();

                    b.Navigation("employeePersonalDocumnet")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonelTracking_4_Entities.Contrete.EmployeeEducationInfo", b =>
                {
                    b.Navigation("Certificates");
                });
#pragma warning restore 612, 618
        }
    }
}
